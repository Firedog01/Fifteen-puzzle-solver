Układy parzyste i nieparzyste
Głębokość stanu - ile ruchów jest potrzebnych, żeby dojść do stanu docelowego
    0 - ułożona zagadka
    1 - 2 układy
    2 - 4 układy
    ...
    53 - największa liczba układów
    ...
    80 - max

Przesuwamy pole puste. Ogólnie w 4 różnych kierunkach. 

Ruchy to operatory

przestrzeń stanów - trzy elementy: 
	- zbiór wszystkich stanów, 
	- zbiór operatorów (L, R, U, D), 
	- model przejścia
model przejścia - funkcja dwuargumentowa, bierzący stan i operator który chcemy zaaplikować. 
	Jako wynik otrzymujemy nowy stan po zaaplikowaniu tego operatora.
Artificial intelligence, modern approach - książka

problem który mamy rozwiązać
	- przestrzeń stanów
	- stan początkowy
	- stan docelowy (-> test)
	- jednostkowe koszty przejścia - ile kosztuje zastosowanie operatora w danym stanie (tyle samo dla wszystkich u nas)

ścieżka - ciąg stanów powiązanych dopuszczalnymi operatorami
	można określić koszt ścieżki, suma jednostkowych kosztów przejść
rozwiązanie - ciąg operatorów prowadzących od stanu początkowego do stanu docelowego.
rozwiązanie optymalne - o najmniejszym koszcie ścieżki spośród wszystkich rozwiązań

graf skieorwany i etykietowany, z każdą krawędzią skorelowana jest etykieta operatora

reprezentacja grafu: 
	1. reprezentacja definicyjna (niezalecana) przechowywanie wszystkich stanów i połączeń
	2. macież sąsiedztwa, informuje o tym jakie połączenia występują w grafie
	3. lista sąsiedztwa, ponumerowane wieszchołki, przechowywane są informacje o połączeniach każdego wieszchołka
	4. postać niejawna, przyjmuje jeden argument, generuje stany sąsiednie 
	
strategie:
	- kompletne 
		+ optymalne, gwarantują znalezienie rozwiązania optymalnego
	- niekompletne - nawet jeśli istnieje roziwązanie to mogą go nie znaleźć
strategie przeszukiwania:
	- ślepe (brute-force, blind, uninformed) przeszukują w ustalonym porządku
		+ wszerz (breadth-first search)
		+ w głąb (depth-first search) [depth-limited search]
	- heurystyczne (heuristic, informed, directed) istnieje funkcja która ocenia który kierunek jest najlepszy
		+ A*
heurystyka to oszacowanie, niekoniecznie prawdziwe. 
	
bfs wer 1:
	- argumenty: struktura grafu i stan początkowy
	- kolejka stanów przetwarzanych
	- kolejka stanów odwiedzonych
	kolejkujemy stan początkowy 
	loop:
		czy kolejka jest pusta:
			jeśli nie, pobierz pierwszy element z kolejki
			sprawdź czy element jest rozwiązaniem (jeśli tak, zakończ)
			zakolejkuj każdego sąsiada

stan odwiedzony - włożony do kolejki, na liście stanów otwartych
stan przetworzony - odpytany o sąsiadów

---------------------------- lekcja 2
lista stanów otwartych - jeszcze nie przetworzeni ale wrzucony do kolejki

bfs wer 2:
    s - stan początkowy
    Q = queue
    T = set
    Q.enqueue(s)
    while !Q.isempty():
        v = Q.dequeue()
        if v is solution:
            return success
        T.add(v)
        for n in neighbours(v):
            if !T.has(n) and !Q.has(n):
                Q.enqueue(n)
    return failure

bfs wer 3:
    s - stan początkowy
    if s is solution:
        return success
    Q = queue
    U = set
    Q.enqueue(s)
    while !Q.isempty():
        v = Q.dequeue()
        for n in neighbours(v):
            if n is solution:
                return success
            if !U.has(n):
                Q.enqueue(n)
                U.add(v)
    return failure

// uniform cost search

dfs iteracyjne przepisana rekurencja:
    v - stan początkowy
    G - goal
    dfs(G, v):
        T - lista stanów otwartych (set)
        S - lista stanów zamkniętych (stack)
        while !S.empty():
            v = S.pop()
            if v is solution:
                return success
            if !T.has(n):
                T.add(v)
                for n in neghbours(v).reverse():
                    S.push(n)
        return failure

dfs nowa implementacja z rozbieżnościami co do rekurencji:
    v - stan początkowy
    G - goal
    dfs(G, s):
        if s is solution:
            return success
        T - lista stanów otwartych (set)
        S - lista stanów zamkniętych (stack)
        S.push(s)
        while !S.empty():
            v = S.pop()
            if !T.has(n):
                T.add(v)
                for n in neghbours(v).reverse():
                    if n is solution:
                        return success
                    S.push(n)
        return failure


heurystyki:
maksymalizujemy ilość elementów na swoim miejscu
zaczynamy od metryki hamminga: czy elementy są na swoich miejscach

metryka manhattan: liczy odległości poszczególnych elementów na osi x i y

funkcja oszacowania węzła - suma funkcji heurystyki i głębokości danego węzła
im mniejsza wartość tym szybciej jest rozpatrywany dany węzeł
    f(x) = g(x) + h(x)

heurystyka musi być dopuszczalna (admissible) - może się mylić tylko w jedną stronę, nie może przeszacować kosztu dotarcia
    do celu

astr gwarantuje znalezienie optymalnego rozwiązania

heurystyka musi być spójna (consistency) - doczytać.

w heurystyce nie uwzględniać zera!!

potrzeba kolejki priorytetowej
priority_queue
https://medium.com/@taohidulii/min-priority-queue-in-c-7e64bd01359c
youtube: Introduction to algorithms MIT

astar(G, s):
    if s is solution:
        return success
    P = priority_queue()
    T = set()
    P.insert(s, 0) // z priorytetem zero
    while !P.isempty():
        v = P.pull() // najmniejszy priorytet
        if v is solution:
            return success
        T.add(v)
        for n in v.neighbours:
            if !T.has(n):
                f = g(n) + h(n)
                if !P.has(n):
                    P.insert(n, f)
                else:
                    if P.priority(n) > f:
                        P.update(n, f) // zastąp
    return failure


